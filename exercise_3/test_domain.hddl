(define (domain test_domain)
  (:requirements :typing :hierachie)

  (:types
    workstation - object ; can get boxes and contain supplies
  )

  (:predicates
    (has_valve ?w - workstation) ; workstation ?w has a valve
    ;; (has_bolt ?w - workstation) ; workstation ?w has a bolt
    (has_tool ?w - workstation) ; workstation ?w has a tool 
  )

  (:task dummy_task
    :parameters (?w - workstation)
    :precondition ()
    :effect ()
  )
  (:task dummy_task2
    :parameters (?w - workstation)
    :precondition ()
    :effect ()
  )  

  (:method dummy_method
    :parameters (?w - workstation)
    :task (dummy_task ?w)
    :subtasks (and
        (task0 (dummy_action ?w))
    )
  )
  (:method dummy_method2
    :parameters (?w - workstation)
    :task (dummy_task2 ?w)
    :subtasks (and
        (task0 (dummy_action2 ?w))
    )
  )

  (:action dummy_action
    :parameters (?w - workstation)
    :precondition (and
      (has_valve ?w)
    )
    :effect (and
      (not (has_valve ?w))
    )
  )
  (:action dummy_action2
    :parameters (?w - workstation)
    :precondition (has_tool ?w)
    :effect (not (has_tool ?w))
  )
)

;; ===================================================================

; (define (domain test_domain)
;   (:types
;     location - object
;     target - object
;     locatable - object
;     vehicle - locatable
;     package - locatable
;     capacity_number - object
;   )
;   (:predicates
;     (road ?arg0 - location ?arg1 - location)
;     (at ?arg0 - locatable ?arg1 - location)
;     (in ?arg0 - package ?arg1 - vehicle)
;     (capacity ?arg0 - vehicle ?arg1 - capacity_number)
;     (capacity_predecessor ?arg0 - capacity_number ?arg1 - capacity_number)
;   )

;   ;; TASKS
;   (:task get_to
;     :parameters (?v - vehicle ?l - location)
;     :precondition ()
;     :effect ()
;   )

;   ;; METHODS
;   (:method m_i_am_there_ordering_0
;     :parameters (?l - location ?v - vehicle)
;     :task (get_to ?v ?l)
;     :subtasks (and
;       (task0 (noop ?v ?l))
;     )
;   )

;   ;; ACTIONS
;   (:action noop
;       :parameters (?v - vehicle ?l2 - location)
;       :precondition (and 
;         (at ?v ?l2)
;       )
;       :effect ()
;   )
  
; )