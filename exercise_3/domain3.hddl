(define (domain logistic_planning_3)
  (:requirements :typing :hierachie)

  (:types
    location - object ; can contain workstations robots and boxes
    warehouse - location ; contains supplies
    workstation - object ; can get boxes and contain supplies
    robot - object ; can pick up boxes, fill them, unload them and move between locations
    carrier - location ; contains boxes if it has free spaces
    space - object ; determines how many spaces a carrier has
    box - object ; can contain supplies
    supply - object ; required by workstations
    valve - supply ; type of supply
    bolt - supply ; type of supply
    tool - supply ; type of supply
  )

  (:predicates
    ;; locations
    (connected ?l1 ?l2 - location) ; location ?l1 is connected to location ?l2
    ;; boxes
    (box_at_loc ?b - box ?l - location) ; box ?b is in the location ?l
    (box_empty ?b - box) ; box ?b is empty
    (box_full ?b - box) ; box ?b is full
    (supply_in_box ?s - supply ?b - box) ; supply ?s is in box ?b
    ;; robots
    (robot_at_loc ?r - robot ?l - location) ; robot ?r is at location ?l
    (robot_has_carrier ?r - robot ?c - carrier) ; robot ?r has carrier ?c
    ;; workstations
    (ws_at_loc ?w - workstation ?l - location) ; workstation ?w is at location ?l
    ;; (ws_contains ?w - workstation ?s - supply) ; workstation ?w contains supply ?s
    (has_valve ?w - workstation) ; workstation ?w has a valve
    (has_bolt ?w - workstation) ; workstation ?w has a bolt
    (has_tool ?w - workstation) ; workstation ?w has a tool 
    (supply_available ?s - supply) ; supply ?s is available
    ;; supplies
    (supply_at_loc ?s - supply ?l - location) ; supply ?s is at location ?l
    ;; carrier space
    (free ?c - carrier ?s - space) ; space ?s is not used carrier ?c
    (occupied ?c - carrier ?s - space) ; space ?s is used by carrier ?c
  )

  ;; TODO: convert the 3 supply tasks into an unique task
  ;; TODO: verify if it is necessary to have separate load methods

  ;; move robot ?r to location ?l
  (:task go_to
    :parameters (?r - robot ?l - location)
    :precondition ()
    :effect ()
  )
  ;; prepare robot ?r loading box ?b and supply ?s
  (:task load_task
    :parameters (?r - robot ?b - box ?s - supply)
    :precondition ()
    :effect ()
  )

  ;; move robot ?r from location ?from to location ?to if they are connected
  (:method m_go_to_direct_connection
    :parameters (
      ?r - robot
      ?c - carrier
      ?from - location
      ?to - location
    )
    :task (go_to ?r ?to)
    :subtasks (and
      (task0 (move_carrier ?r ?c ?from ?to))
    )
  )
  ;; recursive method used if ?from and ?to are not connected
  (:method m_go_to
    :parameters (
      ?r - robot
      ?c - carrier
      ?from - location
      ?to - location
    )
    :task (go_to ?r ?to)
    :subtasks (and
      (task0 (go_to ?r ?from))
      (task1 (move_carrier ?r ?c ?from ?to))
    )
    :ordering (and
      (task0 < task1)
    )
  )
  ;; base method used if the robot is already at location
  (:method m_go_to_trivial
    :parameters (?r - robot ?l - location)
    :task (go_to ?r ?l)
    :subtasks (and
      (task0 (noop ?r ?l))
    )
  )
  ;; load a box with 
  (:method m_load_method
    :parameters (
      ?r - robot
      ?c - carrier
      ?b - box
      ?sp - space
      ?s - supply
      ?l - location
    )
    :task (load_task ?r ?b ?s)
    :subtasks (and
      (task0 (load_supply ?r ?l ?b ?s))
      (task1 (load_carrier ?r ?c ?b ?sp ?l))
    )
    ;; NOTE: ordering is important since we can't load a box before filling it
    :ordering (and
      (task0 < task1)
    )
  )

  ;; Recursion termination
  (:action noop
    :parameters (?r - robot ?l - location)
    :precondition (and 
      (robot_at_loc ?r ?l)
    )
    :effect ()
  )
  ;; moves a robot with its carrier to a new location
  (:action move_carrier
    :parameters (?r - robot ?c - carrier ?from ?to - location)
    :precondition (and
      (connected ?from ?to)
      (robot_at_loc ?r ?from)
      (robot_has_carrier ?r ?c)
    )
    :effect (and
      (not (robot_at_loc ?r ?from))
      (robot_at_loc ?r ?to)
    )
  )
  ;; loads the carrier of a robot with a box
  (:action load_carrier
    :parameters (?r - robot ?c - carrier ?b - box ?s - space ?l - location)
    :precondition (and
      (robot_at_loc ?r ?l)
      (box_at_loc ?b ?l)
      (robot_has_carrier ?r ?c)
      (free ?c ?s)
    )
    :effect (and
      (not (box_at_loc ?b ?l))
      (box_at_loc ?b ?c)
      (not (free ?c ?s))
      (occupied ?c ?s)
    )
  )
  ;; unloads the carrier of a robot with a box
  (:action unload_carrier
    :parameters (?r - robot ?c - carrier ?b - box ?s - space ?l - location)
    :precondition (and
      (robot_at_loc ?r ?l)
      (box_at_loc ?b ?c)
      (robot_has_carrier ?r ?c)
      (occupied ?c ?s)
    )
    :effect (and
      (box_at_loc ?b ?l)
      (not (box_at_loc ?b ?c))
      (free ?c ?s)
      (not (occupied ?c ?s))
    )
  )
  ;; loads an empty box with a supply
  (:action load_supply
    :parameters (?r - robot ?l - location ?b - box ?s - supply)
    :precondition (and
      (robot_at_loc ?r ?l)
      (box_at_loc ?b ?l)
      (supply_at_loc ?s ?l)
      (box_empty ?b)
      (supply_available ?s)
    )
    :effect (and
      (supply_in_box ?s ?b)
      (not (box_empty ?b))
      (box_full ?b)
      (not (supply_at_loc ?s ?l))
    )
  )
  ;; unloads the content of a box to a given workstation if it is a valve
  (:action unload_valve
    :parameters (?r - robot ?b - box ?valve - valve ?l - location ?w - workstation)
    :precondition (and
      (robot_at_loc ?r ?l)
      (supply_in_box ?valve ?b)
      (box_at_loc ?b ?l)
      (ws_at_loc ?w ?l)
      (box_full ?b)
      ;; (is_valve ?s)
    )
    :effect (and
      (box_empty ?b)
      (not (box_full ?b))
      (supply_at_loc ?valve ?l)
      ;; (ws_contains ?w ?valve)
      (not (supply_in_box ?valve ?b))
      (not (supply_available ?valve))
      (has_valve ?w)
    )
  )
  ;; unloads the content of a box to a given workstation if it is a bolt
  (:action unload_bolt
    :parameters (?r - robot ?b - box ?bolt - bolt ?l - location ?w - workstation)
    :precondition (and
      (robot_at_loc ?r ?l)
      (supply_in_box ?bolt ?b)
      (box_at_loc ?b ?l)
      (ws_at_loc ?w ?l)
      (box_full ?b)
      ;; (is_bolt ?bolt)
    )
    :effect (and
      (box_empty ?b)
      (not (box_full ?b))
      (supply_at_loc ?bolt ?l)
      ;; (ws_contains ?w ?bolt)
      (not (supply_in_box ?bolt ?b))
      (not (supply_available ?bolt))
      (has_bolt ?w)
    )
  )
  ;; unloads the content of a box to a given workstation if it is a tool
  (:action unload_tool
    :parameters (?r - robot ?b - box ?tool - tool ?l - location ?w - workstation)
    :precondition (and
      (robot_at_loc ?r ?l)
      (supply_in_box ?tool ?b)
      (box_at_loc ?b ?l)
      (ws_at_loc ?w ?l)
      (box_full ?b)
      ; (is_tool ?tool)
    )
    :effect (and
      (box_empty ?b)
      (not (box_full ?b))
      (supply_at_loc ?tool ?l)
      ;; (ws_contains ?w ?tool)
      (not (supply_in_box ?tool ?b))
      (not (supply_available ?tool))
      (has_tool ?w)
    )
  )

)